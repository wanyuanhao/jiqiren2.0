[2021-01-26 09:51:09] [INFO] >> run_case.py >> 第17行  - 登录账户获取touken 
[2021-01-26 09:51:10] [INFO] >> Headers.py >> 第33行  - 账号：wanyuanhao，登录报错：{'error': 'invalid_grant', 'error_description': '{"Code":0,"Message":"用户名或密码错误","Data":null}'} 
[2021-01-26 09:51:10] [INFO] >> TestCase.py >> 第40行  - 用例：新增数据——录入出单流程 
[2021-01-26 09:51:10] [INFO] >> Interface_quote.py >> 第24行  - 京AC1122发起续保 
[2021-01-26 09:51:10] [ERROR] >> Requests_util.py >> 第25行  - request方法执行异常,url：Expecting value: line 1 column 1 (char 0) 
[2021-01-26 09:51:10] [ERROR] >> Interface_quote.py >> 第55行  - 续保执行异常：string indices must be integers 
[2021-01-26 09:51:10] [INFO] >> TestCase.py >> 第52行  - 用例：顶级账户计划回访数据量对比，使用账号：jiao 
[2021-01-26 09:51:10] [INFO] >> Headers.py >> 第60行  - 账号：jiao，登录报错：{'error': 'invalid_grant', 'error_description': '{"Code":0,"Message":"用户名或密码错误","Data":null}'} 
[2021-01-26 09:51:10] [INFO] >> TestCase.py >> 第75行  - 用例：校验报价成功的数据是否有报价历史 
[2021-01-26 09:51:10] [INFO] >> CustomerList.py >> 第405行  - 筛选报价成功数据 
[2021-01-26 09:51:10] [ERROR] >> Requests_util.py >> 第25行  - request方法执行异常,url：Expecting value: line 1 column 1 (char 0) 
[2021-01-26 09:51:10] [INFO] >> TestCase.py >> 第85行  - 用例：校验切换报价历史是否成功 
[2021-01-26 09:51:10] [INFO] >> CustomerList.py >> 第405行  - 筛选报价成功数据 
[2021-01-26 09:51:10] [ERROR] >> Requests_util.py >> 第25行  - request方法执行异常,url：Expecting value: line 1 column 1 (char 0) 
[2021-01-26 09:51:10] [INFO] >> TestCase.py >> 第105行  - 用例：下级账户计划回访数据量对比,使用账号：18612938273 
[2021-01-26 09:51:10] [INFO] >> Headers.py >> 第60行  - 账号：18612938273，登录报错：{'error': 'invalid_grant', 'error_description': '{"Code":0,"Message":"用户名或密码错误","Data":null}'} 
[2021-01-26 09:51:10] [INFO] >> TestCase.py >> 第130行  - 用例：客户列表分配，使用账号wanyuanhao,分配人：17501110001 
[2021-01-26 09:51:10] [INFO] >> TestCase.py >> 第131行  - 执行分配用例 
[2021-01-26 09:51:10] [INFO] >> Headers.py >> 第60行  - 账号：wanyuanhao，登录报错：{'error': 'invalid_grant', 'error_description': '{"Code":0,"Message":"用户名或密码错误","Data":null}'} 
[2021-01-26 09:51:10] [INFO] >> TestCase.py >> 第139行  - 用例：使用全部客户第5条数据录入战败 
[2021-01-26 09:51:10] [INFO] >> CustomerList.py >> 第445行  - 获取全部客户数据 
[2021-01-26 09:51:11] [ERROR] >> Requests_util.py >> 第25行  - request方法执行异常,url：Expecting value: line 1 column 1 (char 0) 
[2021-01-26 09:51:11] [INFO] >> CustomerList.py >> 第458行  - 获取全部客户数据异常：string indices must be integers 
[2021-01-26 09:51:11] [INFO] >> TestCase.py >> 第149行  - 用例：使用全部客户第8条数据录入续保跟进 
[2021-01-26 09:51:11] [INFO] >> CustomerList.py >> 第445行  - 获取全部客户数据 
[2021-01-26 09:51:11] [ERROR] >> Requests_util.py >> 第25行  - request方法执行异常,url：Expecting value: line 1 column 1 (char 0) 
[2021-01-26 09:51:11] [INFO] >> CustomerList.py >> 第458行  - 获取全部客户数据异常：string indices must be integers 
[2021-01-26 09:51:11] [INFO] >> TestCase.py >> 第157行  - 用例：客户列表不筛选导出全部客户TAB数据 
[2021-01-26 09:51:11] [INFO] >> CustomerList.py >> 第479行  - 客户列表导出 
[2021-01-26 09:51:11] [ERROR] >> Requests_util.py >> 第25行  - request方法执行异常,url：Expecting value: line 1 column 1 (char 0) 
[2021-01-26 09:51:11] [INFO] >> CustomerList.py >> 第486行  - 返回导出响应结果：request方法执行异常：Expecting value: line 1 column 1 (char 0) 
[2021-01-26 09:51:11] [INFO] >> TestCase.py >> 第163行  - 用例：客户列表筛选（战败）导出全部客户数据 
[2021-01-26 09:51:11] [INFO] >> CustomerList.py >> 第489行  - 客户列表导出 
[2021-01-26 09:51:11] [ERROR] >> Requests_util.py >> 第25行  - request方法执行异常,url：Expecting value: line 1 column 1 (char 0) 
[2021-01-26 09:51:11] [INFO] >> CustomerList.py >> 第497行  - 返回导出响应结果：request方法执行异常：Expecting value: line 1 column 1 (char 0) 
[2021-01-26 09:51:11] [INFO] >> TestCase.py >> 第170行  - 用例：定保录入成功预约 
[2021-01-26 09:51:11] [INFO] >> CustomerList.py >> 第445行  - 获取全部客户数据 
[2021-01-26 09:51:11] [ERROR] >> Requests_util.py >> 第25行  - request方法执行异常,url：Expecting value: line 1 column 1 (char 0) 
[2021-01-26 09:51:11] [INFO] >> CustomerList.py >> 第458行  - 获取全部客户数据异常：string indices must be integers 
[2021-01-26 09:51:11] [INFO] >> TestCase.py >> 第178行  - 用例：定保录入战败 
[2021-01-26 09:51:11] [INFO] >> CustomerList.py >> 第445行  - 获取全部客户数据 
[2021-01-26 09:51:11] [ERROR] >> Requests_util.py >> 第25行  - request方法执行异常,url：Expecting value: line 1 column 1 (char 0) 
[2021-01-26 09:51:11] [INFO] >> CustomerList.py >> 第458行  - 获取全部客户数据异常：string indices must be integers 
[2021-01-26 09:51:11] [INFO] >> TestCase.py >> 第186行  - 用例：批量续保文件上传 
[2021-01-26 09:51:11] [INFO] >> CustomerList.py >> 第564行  - 上传文件 
[2021-01-26 09:51:11] [ERROR] >> Requests_util.py >> 第25行  - request方法执行异常,url：Expecting value: line 1 column 1 (char 0) 
[2021-01-26 09:51:11] [ERROR] >> CustomerList.py >> 第589行  - upload_file方法执行异常：string indices must be integers 
[2021-01-26 09:51:11] [INFO] >> TestCase.py >> 第195行  - 用例：工作看板人员效能统计，校验录入出单、保费是否有统计 
[2021-01-26 09:51:11] [INFO] >> TestCase.py >> 第198行  - 校验人员效能响应结果是否为None ：{'code': 401, 'message': '授权失败', 'data': None} 
[2021-01-26 09:51:11] [INFO] >> run_case.py >> 第34行  - 发送邮件 
[2021-01-26 09:57:18] [INFO] >> run_case.py >> 第17行  - 登录账户获取touken 
[2021-01-26 09:57:18] [INFO] >> Headers.py >> 第40行  - token更新到config文件 
[2021-01-26 09:57:18] [INFO] >> Headers.py >> 第42行  - 返回token 
[2021-01-26 09:57:18] [INFO] >> TestCase.py >> 第40行  - 用例：新增数据——录入出单流程 
[2021-01-26 09:57:18] [INFO] >> Interface_quote.py >> 第24行  - 京AC1122发起续保 
[2021-01-26 09:57:19] [INFO] >> Interface_quote.py >> 第43行  - 获取续保响应结果 
[2021-01-26 09:57:19] [INFO] >> Interface_quote.py >> 第46行  - 新增车牌成功 
[2021-01-26 09:57:19] [INFO] >> CustomerList.py >> 第29行  - 获取京AC1122查询结果 
[2021-01-26 09:57:19] [INFO] >> CustomerList.py >> 第33行  - 客户列表查询车牌通过 
[2021-01-26 09:57:19] [INFO] >> CustomerList.py >> 第48行  - 根据buid录入出单，默认录入人保 
[2021-01-26 09:57:19] [INFO] >> CustomerList.py >> 第51行  - 客户列表查询京AC1122是否存在 
[2021-01-26 09:57:19] [INFO] >> CustomerList.py >> 第29行  - 获取京AC1122查询结果 
[2021-01-26 09:57:19] [INFO] >> CustomerList.py >> 第33行  - 客户列表查询车牌通过 
[2021-01-26 09:57:19] [INFO] >> CustomerList.py >> 第56行  - 查询结果拿第一个buid 
[2021-01-26 09:57:19] [INFO] >> CustomerList.py >> 第65行  - 发起录入出单请求 
[2021-01-26 09:57:19] [INFO] >> CustomerList.py >> 第86行  - 本年度已出过保单,提交覆盖 
[2021-01-26 09:57:19] [INFO] >> CustomerList.py >> 第100行  - 获取响应message校验是否出单成功 
[2021-01-26 09:57:22] [INFO] >> CustomerList.py >> 第108行  - 出单成功，校验buid[600976286]是否一致 
[2021-01-26 09:57:22] [INFO] >> CustomerList.py >> 第111行  - 校验出单状态、录入保司、金额是否一致 
[2021-01-26 09:57:22] [INFO] >> CustomerList.py >> 第114行  - 出单成功 
[2021-01-26 09:57:22] [INFO] >> chudan_and_zhanbai.py >> 第26行  - 出单列表查询 
[2021-01-26 09:57:22] [INFO] >> chudan_and_zhanbai.py >> 第37行  - 出单列表查询通过 
[2021-01-26 09:57:22] [INFO] >> TestCase.py >> 第52行  - 用例：顶级账户计划回访数据量对比，使用账号：jiao 
[2021-01-26 09:57:22] [INFO] >> CustomerList.py >> 第374行  - 获取接口返回的计划回访数量 
[2021-01-26 09:57:22] [INFO] >> CustomerList.py >> 第386行  - 列表形式返回计划回访数量：[0, 0, 0, 0, 0, 0, 0, 0, 0] 
[2021-01-26 09:57:22] [INFO] >> CustomerList.py >> 第394行  - 循环获取计划回访每个TAB页的数据 
[2021-01-26 09:57:22] [INFO] >> CustomerList.py >> 第394行  - 循环获取计划回访每个TAB页的数据 
[2021-01-26 09:57:22] [INFO] >> CustomerList.py >> 第394行  - 循环获取计划回访每个TAB页的数据 
[2021-01-26 09:57:22] [INFO] >> CustomerList.py >> 第394行  - 循环获取计划回访每个TAB页的数据 
[2021-01-26 09:57:22] [INFO] >> CustomerList.py >> 第394行  - 循环获取计划回访每个TAB页的数据 
[2021-01-26 09:57:22] [INFO] >> CustomerList.py >> 第394行  - 循环获取计划回访每个TAB页的数据 
[2021-01-26 09:57:23] [INFO] >> CustomerList.py >> 第394行  - 循环获取计划回访每个TAB页的数据 
[2021-01-26 09:57:23] [INFO] >> CustomerList.py >> 第394行  - 循环获取计划回访每个TAB页的数据 
[2021-01-26 09:57:23] [INFO] >> CustomerList.py >> 第394行  - 循环获取计划回访每个TAB页的数据 
[2021-01-26 09:57:23] [INFO] >> TestCase.py >> 第73行  - 用例：校验报价成功的数据是否有报价历史 
[2021-01-26 09:57:23] [INFO] >> CustomerList.py >> 第405行  - 筛选报价成功数据 
[2021-01-26 09:57:23] [INFO] >> CustomerList.py >> 第412行  - 返回筛选结果 
[2021-01-26 09:57:23] [INFO] >> CustomerList.py >> 第420行  - 获取报价历史 
[2021-01-26 09:57:23] [INFO] >> CustomerList.py >> 第425行  - 返回报价历史结果 
[2021-01-26 09:57:23] [INFO] >> TestCase.py >> 第83行  - 用例：校验切换报价历史是否成功 
[2021-01-26 09:57:23] [INFO] >> CustomerList.py >> 第405行  - 筛选报价成功数据 
[2021-01-26 09:57:23] [INFO] >> CustomerList.py >> 第412行  - 返回筛选结果 
[2021-01-26 09:57:23] [INFO] >> CustomerList.py >> 第420行  - 获取报价历史 
[2021-01-26 09:57:23] [INFO] >> CustomerList.py >> 第425行  - 返回报价历史结果 
[2021-01-26 09:57:23] [INFO] >> CustomerList.py >> 第433行  - 根据报价历史id切换报价历史 
[2021-01-26 09:57:24] [INFO] >> CustomerList.py >> 第438行  - 报价历史已切换 
[2021-01-26 09:57:24] [INFO] >> TestCase.py >> 第103行  - 用例：下级账户计划回访数据量对比,使用账号：16363501234 
[2021-01-26 09:57:24] [INFO] >> Headers.py >> 第60行  - 账号：16363501234，登录报错：{'error': 'invalid_grant', 'error_description': '{"Code":0,"Message":"用户名或密码错误","Data":null}'} 
[2021-01-26 09:57:24] [INFO] >> TestCase.py >> 第128行  - 用例：客户列表分配，使用账号wanyuanhao,分配人：17501110001 
[2021-01-26 09:57:24] [INFO] >> TestCase.py >> 第129行  - 执行分配用例 
[2021-01-26 09:57:24] [INFO] >> Headers.py >> 第60行  - 账号：wanyuanhao，登录报错：{'error': 'invalid_grant', 'error_description': '{"Code":0,"Message":"用户名或密码错误","Data":null}'} 
[2021-01-26 09:57:24] [INFO] >> TestCase.py >> 第137行  - 用例：使用全部客户第5条数据录入战败 
[2021-01-26 09:57:24] [INFO] >> CustomerList.py >> 第445行  - 获取全部客户数据 
[2021-01-26 09:57:24] [INFO] >> CustomerList.py >> 第134行  - 录入战败 
[2021-01-26 09:57:24] [INFO] >> CustomerList.py >> 第136行  - 客户列表查询京N90047是否存在 
[2021-01-26 09:57:24] [INFO] >> CustomerList.py >> 第29行  - 获取京N90047查询结果 
[2021-01-26 09:57:24] [INFO] >> CustomerList.py >> 第33行  - 客户列表查询车牌通过 
[2021-01-26 09:57:24] [INFO] >> CustomerList.py >> 第139行  - 校验查询结果是否为真 
[2021-01-26 09:57:24] [INFO] >> CustomerList.py >> 第170行  - carPolicyId为None，替换成deteatId 
[2021-01-26 09:57:27] [INFO] >> CustomerList.py >> 第187行  - 录入战败通过 
[2021-01-26 09:57:27] [INFO] >> chudan_and_zhanbai.py >> 第51行  - 战败列表查询 
[2021-01-26 09:57:27] [INFO] >> chudan_and_zhanbai.py >> 第62行  - 战败列表查询通过 
[2021-01-26 09:57:27] [INFO] >> TestCase.py >> 第147行  - 用例：使用全部客户第8条数据录入续保跟进 
[2021-01-26 09:57:27] [INFO] >> CustomerList.py >> 第445行  - 获取全部客户数据 
[2021-01-26 09:57:27] [INFO] >> CustomerList.py >> 第463行  - [buid:601006446]录入普通跟进 
[2021-01-26 09:57:27] [INFO] >> CustomerList.py >> 第469行  - 请求录入跟进 
[2021-01-26 09:57:27] [INFO] >> CustomerList.py >> 第471行  - 返回录入跟进响应结果：{'data': {'coverCode': 0, 'deteatId': None, 'carPolicyId': None}, 'code': 1, 'message': '成功'} 
[2021-01-26 09:57:27] [INFO] >> TestCase.py >> 第155行  - 用例：客户列表不筛选导出全部客户TAB数据 
[2021-01-26 09:57:27] [INFO] >> CustomerList.py >> 第479行  - 客户列表导出 
[2021-01-26 09:57:32] [INFO] >> CustomerList.py >> 第486行  - 返回导出响应结果：{'code': 1, 'message': '操作成功', 'data': 'https://image.91bihu.com/customer/2021/1/26/171383/24636d83004d45a99413fdf4100745b6.zip'} 
[2021-01-26 09:57:32] [INFO] >> TestCase.py >> 第161行  - 用例：客户列表筛选（战败）导出全部客户数据 
[2021-01-26 09:57:32] [INFO] >> CustomerList.py >> 第489行  - 客户列表导出 
[2021-01-26 09:57:33] [INFO] >> CustomerList.py >> 第497行  - 返回导出响应结果：{'code': 1, 'message': '操作成功', 'data': 'https://image.91bihu.com/customer/2021/1/26/171383/2e7386f800ca409fa40512046e1fd8c3.zip'} 
[2021-01-26 09:57:33] [INFO] >> TestCase.py >> 第168行  - 用例：定保录入成功预约 
[2021-01-26 09:57:33] [INFO] >> CustomerList.py >> 第445行  - 获取全部客户数据 
[2021-01-26 09:57:33] [INFO] >> CustomerList.py >> 第506行  - 定保录入成功预约 
[2021-01-26 09:57:33] [INFO] >> CustomerList.py >> 第514行  - 校验响应结果：{'data': {'coverCode': 0, 'deteatId': None, 'carPolicyId': None}, 'code': 1, 'message': '成功'} 
[2021-01-26 09:57:33] [INFO] >> CustomerList.py >> 第516行  - 定保录入成功:{'data': {'coverCode': 0, 'deteatId': None, 'carPolicyId': None}, 'code': 1, 'message': '成功'} 
[2021-01-26 09:57:33] [INFO] >> TestCase.py >> 第176行  - 用例：定保录入战败 
[2021-01-26 09:57:33] [INFO] >> CustomerList.py >> 第445行  - 获取全部客户数据 
[2021-01-26 09:57:33] [INFO] >> CustomerList.py >> 第534行  - 定保录入战败 
[2021-01-26 09:57:33] [INFO] >> CustomerList.py >> 第543行  - 校验响应结果：{'data': {'coverCode': 1, 'deteatId': None, 'carPolicyId': 68}, 'code': 1, 'message': '系统监测您今天已存在定保预约出单/战败记录，重新提交后会覆盖原预约出单/战败记录，确认执行？'} 
[2021-01-26 09:57:33] [INFO] >> CustomerList.py >> 第548行  - 定保出单重复，确认覆盖 
[2021-01-26 09:57:33] [INFO] >> CustomerList.py >> 第534行  - 定保录入战败 
[2021-01-26 09:57:34] [INFO] >> CustomerList.py >> 第543行  - 校验响应结果：{'data': {'coverCode': 0, 'deteatId': None, 'carPolicyId': None}, 'code': 1, 'message': '成功'} 
[2021-01-26 09:57:34] [INFO] >> CustomerList.py >> 第545行  - 定保录入成功 
[2021-01-26 09:57:34] [INFO] >> TestCase.py >> 第184行  - 用例：批量续保文件上传 
[2021-01-26 09:57:34] [INFO] >> CustomerList.py >> 第564行  - 上传文件 
[2021-01-26 09:57:34] [INFO] >> CustomerList.py >> 第571行  - 文件已上传到服务器：BatchRenewal/2021/1/26/171383/6c4376b8dd7b4311b28e7f0222708937.xlsx 
[2021-01-26 09:57:34] [INFO] >> CustomerList.py >> 第572行  - 默认FindDeptId: 2869（部门ID），只适用于wanyuanhao账号，上传城市为【北京】 
[2021-01-26 09:57:34] [INFO] >> CustomerList.py >> 第580行  - 文件上传成功：{'data': {'isValid': True, 'name': '自动化上传.xlsx', 'batchRenewalId': 401381}, 'code': 1, 'message': '上传成功'} 
[2021-01-26 09:57:34] [INFO] >> CustomerList.py >> 第595行  - 通过上传响应结果校验列表是否存在该批次，响应信息:{'data': {'isValid': True, 'name': '自动化上传.xlsx', 'batchRenewalId': 401381}, 'code': 1, 'message': '上传成功'} 
[2021-01-26 09:57:34] [INFO] >> CustomerList.py >> 第599行  - 等待3秒获取列表批次，校验ID是否存在列表 
[2021-01-26 09:57:37] [INFO] >> TestCase.py >> 第193行  - 用例：工作看板人员效能统计，校验录入出单、保费是否有统计 
[2021-01-26 09:57:37] [INFO] >> TestCase.py >> 第196行  - 校验人员效能响应结果是否为None ：{'code': 1, 'message': '成功', 'data': {'employeeId': 0, 'employeeName': None, 'compId': 0, 'insurancedCount': 1, 'defeatCount': 1, 'insuranceAmount': 1738.11, 'bizAmount': 1000.99, 'forceAmount': 500.11, 'taxAmount': 15.01, 'jyPrice': 222.0, 'reviewCount': 3, 'actualReviewCount': 0, 'planReviewCount': 0, 'dueToStoretCount': 0, 'entryCount': 0, 'callTime': 0.0, 'callCount': 0, 'avgCallTime': 0.0, 'renewalInquiryCount': 2, 'quotationCount': 6, 'quotationNumber': 4, 'smsSendCount': 0}} 
[2021-01-26 09:57:37] [INFO] >> TestCase.py >> 第210行  - 获取客户列表buid 
[2021-01-26 09:57:37] [INFO] >> CustomerList.py >> 第445行  - 获取全部客户数据 
[2021-01-26 09:57:38] [INFO] >> CustomerList.py >> 第48行  - 根据buid录入出单，默认录入人保 
[2021-01-26 09:57:38] [INFO] >> CustomerList.py >> 第51行  - 客户列表查询冀AF70P1是否存在 
[2021-01-26 09:57:38] [INFO] >> CustomerList.py >> 第29行  - 获取冀AF70P1查询结果 
[2021-01-26 09:57:38] [INFO] >> CustomerList.py >> 第33行  - 客户列表查询车牌通过 
[2021-01-26 09:57:38] [INFO] >> CustomerList.py >> 第56行  - 查询结果拿第一个buid 
[2021-01-26 09:57:38] [INFO] >> CustomerList.py >> 第65行  - 发起录入出单请求 
[2021-01-26 09:57:38] [INFO] >> CustomerList.py >> 第68行  - message响应成功 
[2021-01-26 09:57:40] [INFO] >> CustomerList.py >> 第74行  - 获取响应message校验是否出单成功 
[2021-01-26 09:57:40] [INFO] >> CustomerList.py >> 第79行  - 出单成功 
[2021-01-26 09:57:45] [INFO] >> TestCase.py >> 第224行  - 二次获取人员效能响应结果，断言响应结果是否为None ：{'code': 1, 'message': '成功', 'data': {'employeeId': 0, 'employeeName': None, 'compId': 0, 'insurancedCount': 2, 'defeatCount': 1, 'insuranceAmount': 3476.22, 'bizAmount': 2001.98, 'forceAmount': 1000.22, 'taxAmount': 30.02, 'jyPrice': 444.0, 'reviewCount': 4, 'actualReviewCount': 0, 'planReviewCount': 0, 'dueToStoretCount': 0, 'entryCount': 0, 'callTime': 0.0, 'callCount': 0, 'avgCallTime': 0.0, 'renewalInquiryCount': 2, 'quotationCount': 6, 'quotationNumber': 4, 'smsSendCount': 0}} 
[2021-01-26 09:57:45] [INFO] >> TestCase.py >> 第228行  - 历史出单台次：1+1，出单后台次：2 
[2021-01-26 09:57:45] [INFO] >> TestCase.py >> 第230行  - 历史出单金额：1738.11+1738.11，出单后金额：3476.22 
[2021-01-26 09:57:45] [INFO] >> run_case.py >> 第34行  - 发送邮件 
 第34行  - 发送邮件  第34行  - 发送邮件  第34行  - 发送邮件
 发送邮件  第34行  - 发送邮件  第34行  - 发送邮件